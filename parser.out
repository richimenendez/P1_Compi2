Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DERLLAVE
    IZQLLAVE
    PORCENTAJE
    SXOR
    abs
    array
    char
    float
    int
    unset

Grammar

Rule 0     S' -> ltag
Rule 1     ltag -> ltag tag linst
Rule 2     ltag -> tag linst
Rule 3     linst -> linst inst PCOMA
Rule 4     linst -> inst PCOMA
Rule 5     inst -> asignacion
Rule 6     inst -> iff
Rule 7     inst -> jump
Rule 8     inst -> printt
Rule 9     inst -> ext
Rule 10    asignacion -> VAR IGUAL exp
Rule 11    tag -> ID DP
Rule 12    tag -> main DP
Rule 13    jump -> goto ID
Rule 14    iff -> if IZQPAR exp DERPAR goto ID
Rule 15    printt -> print IZQPAR va DERPAR
Rule 16    ext -> exit
Rule 17    exp -> expa
Rule 18    exp -> expl
Rule 19    exp -> expra
Rule 20    exp -> expb
Rule 21    exp -> E
Rule 22    expl -> NOT E
Rule 23    expl -> E AND E
Rule 24    expl -> E OR E
Rule 25    expl -> E xor E
Rule 26    expra -> E DIGUAL E
Rule 27    expra -> E DESIGUAL E
Rule 28    expra -> E MAYORIGUAL E
Rule 29    expra -> E MENORIGUAL E
Rule 30    expra -> E MAYOR E
Rule 31    expra -> E MENOR E
Rule 32    expb -> BNOT E
Rule 33    expb -> E BAND E
Rule 34    expb -> E BOR E
Rule 35    expb -> E BXOR E
Rule 36    expb -> E BLEFT E
Rule 37    expb -> E BRIGHT E
Rule 38    expa -> E SUMA E
Rule 39    expa -> E RESTA E
Rule 40    expa -> E MULTI E
Rule 41    expa -> E DIV E
Rule 42    E -> ent
Rule 43    E -> dou
Rule 44    E -> va
Rule 45    E -> str
Rule 46    ent -> INTEGER
Rule 47    dou -> DOUBLE
Rule 48    str -> STR
Rule 49    va -> VAR

Terminals, with rules where they appear

AND                  : 23
BAND                 : 33
BLEFT                : 36
BNOT                 : 32
BOR                  : 34
BRIGHT               : 37
BXOR                 : 35
DERLLAVE             : 
DERPAR               : 14 15
DESIGUAL             : 27
DIGUAL               : 26
DIV                  : 41
DOUBLE               : 47
DP                   : 11 12
ID                   : 11 13 14
IGUAL                : 10
INTEGER              : 46
IZQLLAVE             : 
IZQPAR               : 14 15
MAYOR                : 30
MAYORIGUAL           : 28
MENOR                : 31
MENORIGUAL           : 29
MULTI                : 40
NOT                  : 22
OR                   : 24
PCOMA                : 3 4
PORCENTAJE           : 
RESTA                : 39
STR                  : 48
SUMA                 : 38
SXOR                 : 
VAR                  : 10 49
abs                  : 
array                : 
char                 : 
error                : 
exit                 : 16
float                : 
goto                 : 13 14
if                   : 14
int                  : 
main                 : 12
print                : 15
unset                : 
xor                  : 25

Nonterminals, with rules where they appear

E                    : 21 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41
asignacion           : 5
dou                  : 43
ent                  : 42
exp                  : 10 14
expa                 : 17
expb                 : 20
expl                 : 18
expra                : 19
ext                  : 9
iff                  : 6
inst                 : 3 4
jump                 : 7
linst                : 1 2 3
ltag                 : 1 0
printt               : 8
str                  : 45
tag                  : 1 2
va                   : 15 44

Parsing method: LALR

state 0

    (0) S' -> . ltag
    (1) ltag -> . ltag tag linst
    (2) ltag -> . tag linst
    (11) tag -> . ID DP
    (12) tag -> . main DP

    ID              shift and go to state 3
    main            shift and go to state 4

    ltag                           shift and go to state 1
    tag                            shift and go to state 2

state 1

    (0) S' -> ltag .
    (1) ltag -> ltag . tag linst
    (11) tag -> . ID DP
    (12) tag -> . main DP

    ID              shift and go to state 3
    main            shift and go to state 4

    tag                            shift and go to state 5

state 2

    (2) ltag -> tag . linst
    (3) linst -> . linst inst PCOMA
    (4) linst -> . inst PCOMA
    (5) inst -> . asignacion
    (6) inst -> . iff
    (7) inst -> . jump
    (8) inst -> . printt
    (9) inst -> . ext
    (10) asignacion -> . VAR IGUAL exp
    (14) iff -> . if IZQPAR exp DERPAR goto ID
    (13) jump -> . goto ID
    (15) printt -> . print IZQPAR va DERPAR
    (16) ext -> . exit

    VAR             shift and go to state 13
    if              shift and go to state 14
    goto            shift and go to state 15
    print           shift and go to state 16
    exit            shift and go to state 17

    linst                          shift and go to state 6
    inst                           shift and go to state 7
    asignacion                     shift and go to state 8
    iff                            shift and go to state 9
    jump                           shift and go to state 10
    printt                         shift and go to state 11
    ext                            shift and go to state 12

state 3

    (11) tag -> ID . DP

    DP              shift and go to state 18


state 4

    (12) tag -> main . DP

    DP              shift and go to state 19


state 5

    (1) ltag -> ltag tag . linst
    (3) linst -> . linst inst PCOMA
    (4) linst -> . inst PCOMA
    (5) inst -> . asignacion
    (6) inst -> . iff
    (7) inst -> . jump
    (8) inst -> . printt
    (9) inst -> . ext
    (10) asignacion -> . VAR IGUAL exp
    (14) iff -> . if IZQPAR exp DERPAR goto ID
    (13) jump -> . goto ID
    (15) printt -> . print IZQPAR va DERPAR
    (16) ext -> . exit

    VAR             shift and go to state 13
    if              shift and go to state 14
    goto            shift and go to state 15
    print           shift and go to state 16
    exit            shift and go to state 17

    linst                          shift and go to state 20
    inst                           shift and go to state 7
    asignacion                     shift and go to state 8
    iff                            shift and go to state 9
    jump                           shift and go to state 10
    printt                         shift and go to state 11
    ext                            shift and go to state 12

state 6

    (2) ltag -> tag linst .
    (3) linst -> linst . inst PCOMA
    (5) inst -> . asignacion
    (6) inst -> . iff
    (7) inst -> . jump
    (8) inst -> . printt
    (9) inst -> . ext
    (10) asignacion -> . VAR IGUAL exp
    (14) iff -> . if IZQPAR exp DERPAR goto ID
    (13) jump -> . goto ID
    (15) printt -> . print IZQPAR va DERPAR
    (16) ext -> . exit

    ID              reduce using rule 2 (ltag -> tag linst .)
    main            reduce using rule 2 (ltag -> tag linst .)
    $end            reduce using rule 2 (ltag -> tag linst .)
    VAR             shift and go to state 13
    if              shift and go to state 14
    goto            shift and go to state 15
    print           shift and go to state 16
    exit            shift and go to state 17

    inst                           shift and go to state 21
    asignacion                     shift and go to state 8
    iff                            shift and go to state 9
    jump                           shift and go to state 10
    printt                         shift and go to state 11
    ext                            shift and go to state 12

state 7

    (4) linst -> inst . PCOMA

    PCOMA           shift and go to state 22


state 8

    (5) inst -> asignacion .

    PCOMA           reduce using rule 5 (inst -> asignacion .)


state 9

    (6) inst -> iff .

    PCOMA           reduce using rule 6 (inst -> iff .)


state 10

    (7) inst -> jump .

    PCOMA           reduce using rule 7 (inst -> jump .)


state 11

    (8) inst -> printt .

    PCOMA           reduce using rule 8 (inst -> printt .)


state 12

    (9) inst -> ext .

    PCOMA           reduce using rule 9 (inst -> ext .)


state 13

    (10) asignacion -> VAR . IGUAL exp

    IGUAL           shift and go to state 23


state 14

    (14) iff -> if . IZQPAR exp DERPAR goto ID

    IZQPAR          shift and go to state 24


state 15

    (13) jump -> goto . ID

    ID              shift and go to state 25


state 16

    (15) printt -> print . IZQPAR va DERPAR

    IZQPAR          shift and go to state 26


state 17

    (16) ext -> exit .

    PCOMA           reduce using rule 16 (ext -> exit .)


state 18

    (11) tag -> ID DP .

    VAR             reduce using rule 11 (tag -> ID DP .)
    if              reduce using rule 11 (tag -> ID DP .)
    goto            reduce using rule 11 (tag -> ID DP .)
    print           reduce using rule 11 (tag -> ID DP .)
    exit            reduce using rule 11 (tag -> ID DP .)


state 19

    (12) tag -> main DP .

    VAR             reduce using rule 12 (tag -> main DP .)
    if              reduce using rule 12 (tag -> main DP .)
    goto            reduce using rule 12 (tag -> main DP .)
    print           reduce using rule 12 (tag -> main DP .)
    exit            reduce using rule 12 (tag -> main DP .)


state 20

    (1) ltag -> ltag tag linst .
    (3) linst -> linst . inst PCOMA
    (5) inst -> . asignacion
    (6) inst -> . iff
    (7) inst -> . jump
    (8) inst -> . printt
    (9) inst -> . ext
    (10) asignacion -> . VAR IGUAL exp
    (14) iff -> . if IZQPAR exp DERPAR goto ID
    (13) jump -> . goto ID
    (15) printt -> . print IZQPAR va DERPAR
    (16) ext -> . exit

    ID              reduce using rule 1 (ltag -> ltag tag linst .)
    main            reduce using rule 1 (ltag -> ltag tag linst .)
    $end            reduce using rule 1 (ltag -> ltag tag linst .)
    VAR             shift and go to state 13
    if              shift and go to state 14
    goto            shift and go to state 15
    print           shift and go to state 16
    exit            shift and go to state 17

    inst                           shift and go to state 21
    asignacion                     shift and go to state 8
    iff                            shift and go to state 9
    jump                           shift and go to state 10
    printt                         shift and go to state 11
    ext                            shift and go to state 12

state 21

    (3) linst -> linst inst . PCOMA

    PCOMA           shift and go to state 27


state 22

    (4) linst -> inst PCOMA .

    VAR             reduce using rule 4 (linst -> inst PCOMA .)
    if              reduce using rule 4 (linst -> inst PCOMA .)
    goto            reduce using rule 4 (linst -> inst PCOMA .)
    print           reduce using rule 4 (linst -> inst PCOMA .)
    exit            reduce using rule 4 (linst -> inst PCOMA .)
    ID              reduce using rule 4 (linst -> inst PCOMA .)
    main            reduce using rule 4 (linst -> inst PCOMA .)
    $end            reduce using rule 4 (linst -> inst PCOMA .)


state 23

    (10) asignacion -> VAR IGUAL . exp
    (17) exp -> . expa
    (18) exp -> . expl
    (19) exp -> . expra
    (20) exp -> . expb
    (21) exp -> . E
    (38) expa -> . E SUMA E
    (39) expa -> . E RESTA E
    (40) expa -> . E MULTI E
    (41) expa -> . E DIV E
    (22) expl -> . NOT E
    (23) expl -> . E AND E
    (24) expl -> . E OR E
    (25) expl -> . E xor E
    (26) expra -> . E DIGUAL E
    (27) expra -> . E DESIGUAL E
    (28) expra -> . E MAYORIGUAL E
    (29) expra -> . E MENORIGUAL E
    (30) expra -> . E MAYOR E
    (31) expra -> . E MENOR E
    (32) expb -> . BNOT E
    (33) expb -> . E BAND E
    (34) expb -> . E BOR E
    (35) expb -> . E BXOR E
    (36) expb -> . E BLEFT E
    (37) expb -> . E BRIGHT E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    NOT             shift and go to state 35
    BNOT            shift and go to state 36
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    exp                            shift and go to state 29
    expa                           shift and go to state 30
    expl                           shift and go to state 31
    expra                          shift and go to state 32
    expb                           shift and go to state 33
    E                              shift and go to state 34
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 24

    (14) iff -> if IZQPAR . exp DERPAR goto ID
    (17) exp -> . expa
    (18) exp -> . expl
    (19) exp -> . expra
    (20) exp -> . expb
    (21) exp -> . E
    (38) expa -> . E SUMA E
    (39) expa -> . E RESTA E
    (40) expa -> . E MULTI E
    (41) expa -> . E DIV E
    (22) expl -> . NOT E
    (23) expl -> . E AND E
    (24) expl -> . E OR E
    (25) expl -> . E xor E
    (26) expra -> . E DIGUAL E
    (27) expra -> . E DESIGUAL E
    (28) expra -> . E MAYORIGUAL E
    (29) expra -> . E MENORIGUAL E
    (30) expra -> . E MAYOR E
    (31) expra -> . E MENOR E
    (32) expb -> . BNOT E
    (33) expb -> . E BAND E
    (34) expb -> . E BOR E
    (35) expb -> . E BXOR E
    (36) expb -> . E BLEFT E
    (37) expb -> . E BRIGHT E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    NOT             shift and go to state 35
    BNOT            shift and go to state 36
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    exp                            shift and go to state 44
    expa                           shift and go to state 30
    expl                           shift and go to state 31
    expra                          shift and go to state 32
    expb                           shift and go to state 33
    E                              shift and go to state 34
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 25

    (13) jump -> goto ID .

    PCOMA           reduce using rule 13 (jump -> goto ID .)


state 26

    (15) printt -> print IZQPAR . va DERPAR
    (49) va -> . VAR

    VAR             shift and go to state 28

    va                             shift and go to state 45

state 27

    (3) linst -> linst inst PCOMA .

    VAR             reduce using rule 3 (linst -> linst inst PCOMA .)
    if              reduce using rule 3 (linst -> linst inst PCOMA .)
    goto            reduce using rule 3 (linst -> linst inst PCOMA .)
    print           reduce using rule 3 (linst -> linst inst PCOMA .)
    exit            reduce using rule 3 (linst -> linst inst PCOMA .)
    ID              reduce using rule 3 (linst -> linst inst PCOMA .)
    main            reduce using rule 3 (linst -> linst inst PCOMA .)
    $end            reduce using rule 3 (linst -> linst inst PCOMA .)


state 28

    (49) va -> VAR .

    SUMA            reduce using rule 49 (va -> VAR .)
    RESTA           reduce using rule 49 (va -> VAR .)
    MULTI           reduce using rule 49 (va -> VAR .)
    DIV             reduce using rule 49 (va -> VAR .)
    AND             reduce using rule 49 (va -> VAR .)
    OR              reduce using rule 49 (va -> VAR .)
    xor             reduce using rule 49 (va -> VAR .)
    DIGUAL          reduce using rule 49 (va -> VAR .)
    DESIGUAL        reduce using rule 49 (va -> VAR .)
    MAYORIGUAL      reduce using rule 49 (va -> VAR .)
    MENORIGUAL      reduce using rule 49 (va -> VAR .)
    MAYOR           reduce using rule 49 (va -> VAR .)
    MENOR           reduce using rule 49 (va -> VAR .)
    BAND            reduce using rule 49 (va -> VAR .)
    BOR             reduce using rule 49 (va -> VAR .)
    BXOR            reduce using rule 49 (va -> VAR .)
    BLEFT           reduce using rule 49 (va -> VAR .)
    BRIGHT          reduce using rule 49 (va -> VAR .)
    PCOMA           reduce using rule 49 (va -> VAR .)
    DERPAR          reduce using rule 49 (va -> VAR .)


state 29

    (10) asignacion -> VAR IGUAL exp .

    PCOMA           reduce using rule 10 (asignacion -> VAR IGUAL exp .)


state 30

    (17) exp -> expa .

    PCOMA           reduce using rule 17 (exp -> expa .)
    DERPAR          reduce using rule 17 (exp -> expa .)


state 31

    (18) exp -> expl .

    PCOMA           reduce using rule 18 (exp -> expl .)
    DERPAR          reduce using rule 18 (exp -> expl .)


state 32

    (19) exp -> expra .

    PCOMA           reduce using rule 19 (exp -> expra .)
    DERPAR          reduce using rule 19 (exp -> expra .)


state 33

    (20) exp -> expb .

    PCOMA           reduce using rule 20 (exp -> expb .)
    DERPAR          reduce using rule 20 (exp -> expb .)


state 34

    (21) exp -> E .
    (38) expa -> E . SUMA E
    (39) expa -> E . RESTA E
    (40) expa -> E . MULTI E
    (41) expa -> E . DIV E
    (23) expl -> E . AND E
    (24) expl -> E . OR E
    (25) expl -> E . xor E
    (26) expra -> E . DIGUAL E
    (27) expra -> E . DESIGUAL E
    (28) expra -> E . MAYORIGUAL E
    (29) expra -> E . MENORIGUAL E
    (30) expra -> E . MAYOR E
    (31) expra -> E . MENOR E
    (33) expb -> E . BAND E
    (34) expb -> E . BOR E
    (35) expb -> E . BXOR E
    (36) expb -> E . BLEFT E
    (37) expb -> E . BRIGHT E

    PCOMA           reduce using rule 21 (exp -> E .)
    DERPAR          reduce using rule 21 (exp -> E .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTI           shift and go to state 48
    DIV             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    xor             shift and go to state 52
    DIGUAL          shift and go to state 53
    DESIGUAL        shift and go to state 54
    MAYORIGUAL      shift and go to state 55
    MENORIGUAL      shift and go to state 56
    MAYOR           shift and go to state 57
    MENOR           shift and go to state 58
    BAND            shift and go to state 59
    BOR             shift and go to state 60
    BXOR            shift and go to state 61
    BLEFT           shift and go to state 62
    BRIGHT          shift and go to state 63


state 35

    (22) expl -> NOT . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 64
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 36

    (32) expb -> BNOT . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 65
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 37

    (42) E -> ent .

    SUMA            reduce using rule 42 (E -> ent .)
    RESTA           reduce using rule 42 (E -> ent .)
    MULTI           reduce using rule 42 (E -> ent .)
    DIV             reduce using rule 42 (E -> ent .)
    AND             reduce using rule 42 (E -> ent .)
    OR              reduce using rule 42 (E -> ent .)
    xor             reduce using rule 42 (E -> ent .)
    DIGUAL          reduce using rule 42 (E -> ent .)
    DESIGUAL        reduce using rule 42 (E -> ent .)
    MAYORIGUAL      reduce using rule 42 (E -> ent .)
    MENORIGUAL      reduce using rule 42 (E -> ent .)
    MAYOR           reduce using rule 42 (E -> ent .)
    MENOR           reduce using rule 42 (E -> ent .)
    BAND            reduce using rule 42 (E -> ent .)
    BOR             reduce using rule 42 (E -> ent .)
    BXOR            reduce using rule 42 (E -> ent .)
    BLEFT           reduce using rule 42 (E -> ent .)
    BRIGHT          reduce using rule 42 (E -> ent .)
    PCOMA           reduce using rule 42 (E -> ent .)
    DERPAR          reduce using rule 42 (E -> ent .)


state 38

    (43) E -> dou .

    SUMA            reduce using rule 43 (E -> dou .)
    RESTA           reduce using rule 43 (E -> dou .)
    MULTI           reduce using rule 43 (E -> dou .)
    DIV             reduce using rule 43 (E -> dou .)
    AND             reduce using rule 43 (E -> dou .)
    OR              reduce using rule 43 (E -> dou .)
    xor             reduce using rule 43 (E -> dou .)
    DIGUAL          reduce using rule 43 (E -> dou .)
    DESIGUAL        reduce using rule 43 (E -> dou .)
    MAYORIGUAL      reduce using rule 43 (E -> dou .)
    MENORIGUAL      reduce using rule 43 (E -> dou .)
    MAYOR           reduce using rule 43 (E -> dou .)
    MENOR           reduce using rule 43 (E -> dou .)
    BAND            reduce using rule 43 (E -> dou .)
    BOR             reduce using rule 43 (E -> dou .)
    BXOR            reduce using rule 43 (E -> dou .)
    BLEFT           reduce using rule 43 (E -> dou .)
    BRIGHT          reduce using rule 43 (E -> dou .)
    PCOMA           reduce using rule 43 (E -> dou .)
    DERPAR          reduce using rule 43 (E -> dou .)


state 39

    (44) E -> va .

    SUMA            reduce using rule 44 (E -> va .)
    RESTA           reduce using rule 44 (E -> va .)
    MULTI           reduce using rule 44 (E -> va .)
    DIV             reduce using rule 44 (E -> va .)
    AND             reduce using rule 44 (E -> va .)
    OR              reduce using rule 44 (E -> va .)
    xor             reduce using rule 44 (E -> va .)
    DIGUAL          reduce using rule 44 (E -> va .)
    DESIGUAL        reduce using rule 44 (E -> va .)
    MAYORIGUAL      reduce using rule 44 (E -> va .)
    MENORIGUAL      reduce using rule 44 (E -> va .)
    MAYOR           reduce using rule 44 (E -> va .)
    MENOR           reduce using rule 44 (E -> va .)
    BAND            reduce using rule 44 (E -> va .)
    BOR             reduce using rule 44 (E -> va .)
    BXOR            reduce using rule 44 (E -> va .)
    BLEFT           reduce using rule 44 (E -> va .)
    BRIGHT          reduce using rule 44 (E -> va .)
    PCOMA           reduce using rule 44 (E -> va .)
    DERPAR          reduce using rule 44 (E -> va .)


state 40

    (45) E -> str .

    SUMA            reduce using rule 45 (E -> str .)
    RESTA           reduce using rule 45 (E -> str .)
    MULTI           reduce using rule 45 (E -> str .)
    DIV             reduce using rule 45 (E -> str .)
    AND             reduce using rule 45 (E -> str .)
    OR              reduce using rule 45 (E -> str .)
    xor             reduce using rule 45 (E -> str .)
    DIGUAL          reduce using rule 45 (E -> str .)
    DESIGUAL        reduce using rule 45 (E -> str .)
    MAYORIGUAL      reduce using rule 45 (E -> str .)
    MENORIGUAL      reduce using rule 45 (E -> str .)
    MAYOR           reduce using rule 45 (E -> str .)
    MENOR           reduce using rule 45 (E -> str .)
    BAND            reduce using rule 45 (E -> str .)
    BOR             reduce using rule 45 (E -> str .)
    BXOR            reduce using rule 45 (E -> str .)
    BLEFT           reduce using rule 45 (E -> str .)
    BRIGHT          reduce using rule 45 (E -> str .)
    PCOMA           reduce using rule 45 (E -> str .)
    DERPAR          reduce using rule 45 (E -> str .)


state 41

    (46) ent -> INTEGER .

    SUMA            reduce using rule 46 (ent -> INTEGER .)
    RESTA           reduce using rule 46 (ent -> INTEGER .)
    MULTI           reduce using rule 46 (ent -> INTEGER .)
    DIV             reduce using rule 46 (ent -> INTEGER .)
    AND             reduce using rule 46 (ent -> INTEGER .)
    OR              reduce using rule 46 (ent -> INTEGER .)
    xor             reduce using rule 46 (ent -> INTEGER .)
    DIGUAL          reduce using rule 46 (ent -> INTEGER .)
    DESIGUAL        reduce using rule 46 (ent -> INTEGER .)
    MAYORIGUAL      reduce using rule 46 (ent -> INTEGER .)
    MENORIGUAL      reduce using rule 46 (ent -> INTEGER .)
    MAYOR           reduce using rule 46 (ent -> INTEGER .)
    MENOR           reduce using rule 46 (ent -> INTEGER .)
    BAND            reduce using rule 46 (ent -> INTEGER .)
    BOR             reduce using rule 46 (ent -> INTEGER .)
    BXOR            reduce using rule 46 (ent -> INTEGER .)
    BLEFT           reduce using rule 46 (ent -> INTEGER .)
    BRIGHT          reduce using rule 46 (ent -> INTEGER .)
    PCOMA           reduce using rule 46 (ent -> INTEGER .)
    DERPAR          reduce using rule 46 (ent -> INTEGER .)


state 42

    (47) dou -> DOUBLE .

    SUMA            reduce using rule 47 (dou -> DOUBLE .)
    RESTA           reduce using rule 47 (dou -> DOUBLE .)
    MULTI           reduce using rule 47 (dou -> DOUBLE .)
    DIV             reduce using rule 47 (dou -> DOUBLE .)
    AND             reduce using rule 47 (dou -> DOUBLE .)
    OR              reduce using rule 47 (dou -> DOUBLE .)
    xor             reduce using rule 47 (dou -> DOUBLE .)
    DIGUAL          reduce using rule 47 (dou -> DOUBLE .)
    DESIGUAL        reduce using rule 47 (dou -> DOUBLE .)
    MAYORIGUAL      reduce using rule 47 (dou -> DOUBLE .)
    MENORIGUAL      reduce using rule 47 (dou -> DOUBLE .)
    MAYOR           reduce using rule 47 (dou -> DOUBLE .)
    MENOR           reduce using rule 47 (dou -> DOUBLE .)
    BAND            reduce using rule 47 (dou -> DOUBLE .)
    BOR             reduce using rule 47 (dou -> DOUBLE .)
    BXOR            reduce using rule 47 (dou -> DOUBLE .)
    BLEFT           reduce using rule 47 (dou -> DOUBLE .)
    BRIGHT          reduce using rule 47 (dou -> DOUBLE .)
    PCOMA           reduce using rule 47 (dou -> DOUBLE .)
    DERPAR          reduce using rule 47 (dou -> DOUBLE .)


state 43

    (48) str -> STR .

    SUMA            reduce using rule 48 (str -> STR .)
    RESTA           reduce using rule 48 (str -> STR .)
    MULTI           reduce using rule 48 (str -> STR .)
    DIV             reduce using rule 48 (str -> STR .)
    AND             reduce using rule 48 (str -> STR .)
    OR              reduce using rule 48 (str -> STR .)
    xor             reduce using rule 48 (str -> STR .)
    DIGUAL          reduce using rule 48 (str -> STR .)
    DESIGUAL        reduce using rule 48 (str -> STR .)
    MAYORIGUAL      reduce using rule 48 (str -> STR .)
    MENORIGUAL      reduce using rule 48 (str -> STR .)
    MAYOR           reduce using rule 48 (str -> STR .)
    MENOR           reduce using rule 48 (str -> STR .)
    BAND            reduce using rule 48 (str -> STR .)
    BOR             reduce using rule 48 (str -> STR .)
    BXOR            reduce using rule 48 (str -> STR .)
    BLEFT           reduce using rule 48 (str -> STR .)
    BRIGHT          reduce using rule 48 (str -> STR .)
    PCOMA           reduce using rule 48 (str -> STR .)
    DERPAR          reduce using rule 48 (str -> STR .)


state 44

    (14) iff -> if IZQPAR exp . DERPAR goto ID

    DERPAR          shift and go to state 66


state 45

    (15) printt -> print IZQPAR va . DERPAR

    DERPAR          shift and go to state 67


state 46

    (38) expa -> E SUMA . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 68
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 47

    (39) expa -> E RESTA . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 69
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 48

    (40) expa -> E MULTI . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 70
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 49

    (41) expa -> E DIV . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 71
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 50

    (23) expl -> E AND . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 72
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 51

    (24) expl -> E OR . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 73
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 52

    (25) expl -> E xor . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 74
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 53

    (26) expra -> E DIGUAL . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 75
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 54

    (27) expra -> E DESIGUAL . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 76
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 55

    (28) expra -> E MAYORIGUAL . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 77
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 56

    (29) expra -> E MENORIGUAL . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 78
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 57

    (30) expra -> E MAYOR . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 79
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 58

    (31) expra -> E MENOR . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 80
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 59

    (33) expb -> E BAND . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 81
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 60

    (34) expb -> E BOR . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 82
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 61

    (35) expb -> E BXOR . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 83
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 62

    (36) expb -> E BLEFT . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 84
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 63

    (37) expb -> E BRIGHT . E
    (42) E -> . ent
    (43) E -> . dou
    (44) E -> . va
    (45) E -> . str
    (46) ent -> . INTEGER
    (47) dou -> . DOUBLE
    (49) va -> . VAR
    (48) str -> . STR

    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 42
    VAR             shift and go to state 28
    STR             shift and go to state 43

    E                              shift and go to state 85
    ent                            shift and go to state 37
    dou                            shift and go to state 38
    va                             shift and go to state 39
    str                            shift and go to state 40

state 64

    (22) expl -> NOT E .

    PCOMA           reduce using rule 22 (expl -> NOT E .)
    DERPAR          reduce using rule 22 (expl -> NOT E .)


state 65

    (32) expb -> BNOT E .

    PCOMA           reduce using rule 32 (expb -> BNOT E .)
    DERPAR          reduce using rule 32 (expb -> BNOT E .)


state 66

    (14) iff -> if IZQPAR exp DERPAR . goto ID

    goto            shift and go to state 86


state 67

    (15) printt -> print IZQPAR va DERPAR .

    PCOMA           reduce using rule 15 (printt -> print IZQPAR va DERPAR .)


state 68

    (38) expa -> E SUMA E .

    PCOMA           reduce using rule 38 (expa -> E SUMA E .)
    DERPAR          reduce using rule 38 (expa -> E SUMA E .)


state 69

    (39) expa -> E RESTA E .

    PCOMA           reduce using rule 39 (expa -> E RESTA E .)
    DERPAR          reduce using rule 39 (expa -> E RESTA E .)


state 70

    (40) expa -> E MULTI E .

    PCOMA           reduce using rule 40 (expa -> E MULTI E .)
    DERPAR          reduce using rule 40 (expa -> E MULTI E .)


state 71

    (41) expa -> E DIV E .

    PCOMA           reduce using rule 41 (expa -> E DIV E .)
    DERPAR          reduce using rule 41 (expa -> E DIV E .)


state 72

    (23) expl -> E AND E .

    PCOMA           reduce using rule 23 (expl -> E AND E .)
    DERPAR          reduce using rule 23 (expl -> E AND E .)


state 73

    (24) expl -> E OR E .

    PCOMA           reduce using rule 24 (expl -> E OR E .)
    DERPAR          reduce using rule 24 (expl -> E OR E .)


state 74

    (25) expl -> E xor E .

    PCOMA           reduce using rule 25 (expl -> E xor E .)
    DERPAR          reduce using rule 25 (expl -> E xor E .)


state 75

    (26) expra -> E DIGUAL E .

    PCOMA           reduce using rule 26 (expra -> E DIGUAL E .)
    DERPAR          reduce using rule 26 (expra -> E DIGUAL E .)


state 76

    (27) expra -> E DESIGUAL E .

    PCOMA           reduce using rule 27 (expra -> E DESIGUAL E .)
    DERPAR          reduce using rule 27 (expra -> E DESIGUAL E .)


state 77

    (28) expra -> E MAYORIGUAL E .

    PCOMA           reduce using rule 28 (expra -> E MAYORIGUAL E .)
    DERPAR          reduce using rule 28 (expra -> E MAYORIGUAL E .)


state 78

    (29) expra -> E MENORIGUAL E .

    PCOMA           reduce using rule 29 (expra -> E MENORIGUAL E .)
    DERPAR          reduce using rule 29 (expra -> E MENORIGUAL E .)


state 79

    (30) expra -> E MAYOR E .

    PCOMA           reduce using rule 30 (expra -> E MAYOR E .)
    DERPAR          reduce using rule 30 (expra -> E MAYOR E .)


state 80

    (31) expra -> E MENOR E .

    PCOMA           reduce using rule 31 (expra -> E MENOR E .)
    DERPAR          reduce using rule 31 (expra -> E MENOR E .)


state 81

    (33) expb -> E BAND E .

    PCOMA           reduce using rule 33 (expb -> E BAND E .)
    DERPAR          reduce using rule 33 (expb -> E BAND E .)


state 82

    (34) expb -> E BOR E .

    PCOMA           reduce using rule 34 (expb -> E BOR E .)
    DERPAR          reduce using rule 34 (expb -> E BOR E .)


state 83

    (35) expb -> E BXOR E .

    PCOMA           reduce using rule 35 (expb -> E BXOR E .)
    DERPAR          reduce using rule 35 (expb -> E BXOR E .)


state 84

    (36) expb -> E BLEFT E .

    PCOMA           reduce using rule 36 (expb -> E BLEFT E .)
    DERPAR          reduce using rule 36 (expb -> E BLEFT E .)


state 85

    (37) expb -> E BRIGHT E .

    PCOMA           reduce using rule 37 (expb -> E BRIGHT E .)
    DERPAR          reduce using rule 37 (expb -> E BRIGHT E .)


state 86

    (14) iff -> if IZQPAR exp DERPAR goto . ID

    ID              shift and go to state 87


state 87

    (14) iff -> if IZQPAR exp DERPAR goto ID .

    PCOMA           reduce using rule 14 (iff -> if IZQPAR exp DERPAR goto ID .)

